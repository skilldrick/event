import unittest

from featurebroker import *
from config import Config
from filesystem import Filesystem


class Category:
    def __init__(self, name):
        self.name = name


class CategoryTree:
    def __init__(self, root=''):
        self.children = []
        self.setRoot(root)

    def setRoot(self, root):
        self.root = root

    def insertChild(self, tree):
        self.children.append(tree)


"""
def printTree(tree):
    def innerPrint(tree, depth):
        if len(tree.children) == 0:
            print ' ' * depth, tree.root
        else:
            print ' ' * depth, tree.root
            for child in tree.children:
                innerPrint(child, depth + 1)
    
    innerPrint(tree, 0)
"""

def traverseTree(tree, func):
    def inner(tree, depth):
        func(tree, depth)
        if len(tree.children) == 0:
            pass
        else:
            for child in tree.children:
                inner(child, depth + 1)
    
    inner(tree, 0)

def printTree(tree):
    def printfunc(tree, depth):
        print ' ' * depth, tree.root
    traverseTree(tree, printfunc)


def compareTree(tree1, tree2):
    pass


class Categories:
    filesystem = RequiredFeature('Filesystem')

    def __init__(self):
        self.categoryTree = CategoryTree()
        self.recurseList(self.filesystem.listDirs(['events', 'rugby']), self.categoryTree)
        printTree(self.categoryTree)

    def searchList(self, needle, categoryList):
        for index, category in enumerate(categoryList):
            if category[0] == needle:
                return index
        return -1

    def recurseList(self, categoryList, tree):
        """
        Takes a list generated by Filesystem and turns it into
        tree form. It does this by recursively delving into the
        list and building the tree.
        """
        firstItem = categoryList[0]
        firstItemName = self.categoryName(firstItem[0])
        tree.setRoot(firstItemName)
        children = firstItem[1]
        if len(children) == 0:
            #return a tree with no children (a leaf essentially)
            return tree
        else:
            for child in children:
                path = self.filesystem.joinPath([firstItem[0], child])
                indexOfChild = self.searchList(path, categoryList)
                assert indexOfChild != -1, 'path not in categoryList'
                """categoryList[indexOfChild:] is a shorter categoryList
                with only elements from the child dir onwards
                """
                tree.insertChild(self.recurseList(categoryList[indexOfChild:], CategoryTree()))
            #return tree with children inserted
            return tree

    def categoryName(self, dirname):
        return self.filesystem.getBasename(dirname)


class CategoriesTests(unittest.TestCase):
    def makeTestTree(self):
        under7 = CategoryTree('under 7s')
        under7.insertChild(CategoryTree('Match 1'))
        under7.insertChild(CategoryTree('Match 2'))
        under8 = CategoryTree('under 8s')
        under9 = CategoryTree('under 9s')
        boys = CategoryTree('Boys')
        boys.insertChild(under7)
        boys.insertChild(under8)
        boys.insertChild(under9)
        under10 = CategoryTree('under 10')
        over10 = CategoryTree('over 10')
        girls = CategoryTree('Girls')
        girls.insertChild(under10)
        girls.insertChild(over10)
        rugby = CategoryTree('Rugby')
        rugby.insertChild(boys)
        rugby.insertChild(girls)
        return rugby
    
    def setUp(self):
        self.categories = Categories()

    def testTest(self):
        pass


class MockFilesystem(Filesystem):
    def listDirs(self, dirname):
        return [
            ('events/rugby', ['boys', 'girls'], []),
            ('events/rugby/boys', ['under 7s', 'under 8s', 'under 9s'], []),
            ('events/rugby/boys/under 7s', ['match 1', 'match 2'], []),
            ('events/rugby/boys/under 7s/match 1', [], []),
            ('events/rugby/boys/under 7s/match 2', [], []),
            ('events/rugby/boys/under 8s', [], []),
            ('events/rugby/boys/under 9s', [], []),
            ('events/rugby/girls', ['under 10s', 'over 10s'], []),
            ('events/rugby/girls/under 10s', [], []),
            ('events/rugby/girls/over 10s', [], []),
            ]



def suite():
    features.provide('Filesystem', MockFilesystem)
    features.provide('Config', Config)
    testSuite = unittest.makeSuite(CategoriesTests)
    return testSuite

    
def main():
    unittest.TextTestRunner().run(suite())

if __name__ == '__main__':
    main()
